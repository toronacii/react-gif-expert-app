{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","category","trim","categories","includes","type","onChange","target","a","categoryParam","encodeURI","url","fetch","response","json","data","map","id","title","images","downsized_medium","useFetchGifs","gifs","loading","state","setState","useEffect","getGifts","then","GifGridItem","className","src","alt","GifGrid","props","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yOAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACpBC,mBAAS,IADW,mBACxCC,EADwC,KACjCC,EADiC,KAGhD,OACE,0BAAMC,SAYR,SAAsBC,GACpBA,EAAEC,iBACF,IAAMC,EAAWL,EAAMM,OACvB,IAAKD,EAAU,OAEfP,GAAc,SAAAS,GACZ,OAAKA,EAAWC,SAASH,GAIlBE,GAHLN,EAAS,IACH,CAAEI,GAAR,mBAAqBE,UAnBvB,2BACAE,KAAK,OACLT,MAAOA,EACPU,SAIJ,YAAmC,IAAXC,EAAU,EAAVA,OACtBV,EAASU,EAAOX,Y,kFChBb,WAAwBK,GAAxB,uBAAAO,EAAA,6DACCC,EAAgBC,UAAUT,GAC1BU,EAFD,iDAEiDF,EAFjD,+DAGkBG,MAAMD,GAHxB,cAGCE,EAHD,gBAIkBA,EAASC,OAJ3B,uBAIGC,EAJH,EAIGA,KAJH,kBAKEA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,oBAA8BF,KAAIC,SAAUC,EAAOC,sBAL9D,6C,sBCGA,IAAMC,EAAe,SAACpB,GAAc,IAAD,EACdN,mBAAS,CACjC2B,KAAM,GACNC,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAaxC,OAPAC,qBAAU,YDTL,SAAP,mCCUIC,CAAS1B,GAAU2B,MAAK,SAAAN,GAAI,OAAIG,EAAS,CACvCH,OACAC,SAAS,SAEV,CAACtB,IAEGuB,GCdIK,EAAc,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,MAAOP,EAAU,EAAVA,IACnC,OAAO,yBAAKmB,UAAU,0CACpB,yBAAKC,IAAKpB,EAAKqB,IAAKd,IACpB,2BAAIA,KCAKe,EAAU,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SAAe,EAEboB,EAAapB,GAA/BqB,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,QAEd,OAAO,oCACL,wBAAIO,UAAU,oCAAoC7B,GAChDsB,GAAW,yBAAKO,UAAU,oCAAf,eACb,yBAAKA,UAAU,aACZR,EAAKN,KAAI,gBAAGC,EAAH,EAAGA,GAAOiB,EAAV,6BACR,kBAAC,EAAD,eACEC,IAAKlB,GACDiB,UCQCE,EApBM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,kBAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACES,EAAWa,KAAI,SAAAf,GAAQ,OACrB,kBAAC,EAAD,CACEkC,IAAKlC,EACLA,SAAUA,UCZtBoC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8804fcf0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [ value, setValue ] = useState('');\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n      type=\"text\"\n      value={value}\n      onChange={handleChange} />\n    </form>\n  );\n\n  function handleChange({ target }) {\n    setValue(target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const category = value.trim();\n    if (!category) return;\n\n    setCategories(categories => {\n      if (!categories.includes(category)) {\n        setValue('');\n        return [category, ...categories];\n      }\n      return categories;\n    });\n  }\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export async function getGifts(category) {\n  const categoryParam = encodeURI(category);\n  const url = `https://api.giphy.com/v1/gifs/search?q=${categoryParam}&limit=10&api_key=J5jUPD9MgICiV0j5LIsBLLGayV64VPmy`;\n  const response = await fetch(url)\n  const { data } = await response.json();\n  return data.map(({ id, title, images }) => ({ id, title, ...images.downsized_medium }));\n}","import { useState, useEffect } from 'react';\nimport { getGifts } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    gifs: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifts(category).then(gifs => setState({\n      gifs,\n      loading: false\n    }));\n  }, [category]);\n\n  return state;\n  \n}","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n  return <div className=\"card animate__animated animate__fadeIn\">\n    <img src={url} alt={title} />\n    <p>{title}</p>\n  </div>\n}","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { gifs, loading } = useFetchGifs(category);\n\n  return <>\n    <h3 className=\"animate__animated animate__flash\">{category}</h3>\n    { loading && <div className=\"animate__animated animate__flash\">Cargando...</div> }\n    <div className=\"card-grid\">\n      {gifs.map(({ id, ...props }) => (\n        <GifGridItem\n          key={id}\n          {...props} />)\n      )}\n    </div>\n  </>\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch Man'])\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>{\n        categories.map(category => (\n          <GifGrid\n            key={category}\n            category={category} />\n        ))}\n      </ol>\n    </div>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}